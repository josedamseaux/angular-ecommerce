{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Subject, throwError } from 'rxjs';\nlet AuthService = class AuthService {\n  constructor(http, cookieService, router) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.router = router;\n    this.accessTokenKey = 'access_token';\n    this.refreshTokenKey = 'refresh_token';\n    this.usernameSubject = new Subject();\n    this.username$ = this.usernameSubject.asObservable();\n    this.urlLogin = 'http://localhost:8000/api/auth/login';\n    this.urlRegister = 'http://localhost:8000/api/users/register';\n    this.urlLogout = 'http://localhost:8000/api/auth/logout';\n  }\n  login(user) {\n    return this.http.post(this.urlLogin, user);\n  }\n  register(user) {\n    return this.http.post(this.urlRegister, user);\n  }\n  saveTokens(accessToken, refreshToken) {\n    this.cookieService.set(this.accessTokenKey, accessToken, undefined, '/', undefined, true, 'Strict');\n    this.cookieService.set(this.refreshTokenKey, refreshToken, undefined, '/', undefined, true, 'Strict');\n  }\n  getAccessToken() {\n    return this.cookieService.get(this.accessTokenKey);\n  }\n  getRefreshToken() {\n    return this.cookieService.get(this.refreshTokenKey);\n  }\n  emitUsername(user) {\n    this.usernameSubject.next(user);\n    localStorage.setItem('username', user); // Almacenar en localStorage\n  }\n\n  emitInfo(userInfo) {\n    localStorage.setItem('userInfo', userInfo); // Almacenar en localStorage\n  }\n\n  getUserData(user) {\n    this.usernameSubject.next(user);\n    localStorage.setItem('username', user); // Almacenar en localStorage\n  }\n\n  clearTokens() {\n    this.cookieService.delete(this.accessTokenKey, '/');\n    this.cookieService.delete(this.refreshTokenKey, '/');\n  }\n  logout() {\n    const accessToken = this.cookieService.get(this.refreshTokenKey);\n    localStorage.removeItem('username');\n    if (accessToken) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${accessToken}`\n      });\n      this.clearTokens();\n      this.http.get(this.urlLogout, {\n        headers\n      }).subscribe(() => {\n        // Logout exitoso, redirigir a la p치gina deseada\n        this.router.navigate(['/ruta-deseada']);\n      }, error => {\n        // Manejar errores si es necesario\n      });\n    } else {\n      // Manejar caso sin token de acceso\n      return throwError(() => new Error('No se encontr칩 el token de acceso'));\n    }\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["HttpHeaders","Injectable","Subject","throwError","AuthService","constructor","http","cookieService","router","accessTokenKey","refreshTokenKey","usernameSubject","username$","asObservable","urlLogin","urlRegister","urlLogout","login","user","post","register","saveTokens","accessToken","refreshToken","set","undefined","getAccessToken","get","getRefreshToken","emitUsername","next","localStorage","setItem","emitInfo","userInfo","getUserData","clearTokens","delete","logout","removeItem","headers","subscribe","navigate","error","Error","__decorate","providedIn"],"sources":["C:\\Users\\josed\\Escritorio\\WebDev\\1 ANGULAR\\frontEcommerceAngular\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, tap, throwError } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\nimport { UserInterface } from '../interfaces/user.interface';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private accessTokenKey = 'access_token';\n  private refreshTokenKey = 'refresh_token';\n\n  private usernameSubject = new Subject<string>();\n\n  username$ = this.usernameSubject.asObservable();\n\nconstructor(private http: HttpClient, private cookieService: CookieService, private router: Router\n  ) {}\n  \n  urlLogin = 'http://localhost:8000/api/auth/login';\n  urlRegister = 'http://localhost:8000/api/users/register';\n  urlLogout = 'http://localhost:8000/api/auth/logout';\n  \n  login(user: any): Observable<any> {\n    return this.http.post(this.urlLogin, user);\n  }\n\n  register(user: UserInterface): Observable<any> {\n    return this.http.post(this.urlRegister, user);\n  }\n\n  saveTokens(accessToken: string, refreshToken: string) {\n    this.cookieService.set(this.accessTokenKey, accessToken, undefined, '/', undefined, true, 'Strict');\n    this.cookieService.set(this.refreshTokenKey, refreshToken, undefined, '/', undefined, true, 'Strict');\n  }\n\n  getAccessToken(): string | null {\n    return this.cookieService.get(this.accessTokenKey);\n  }\n\n  getRefreshToken(): string | null {\n    return this.cookieService.get(this.refreshTokenKey);\n  }\n\n  emitUsername(user: any) {\n    this.usernameSubject.next(user);\n    localStorage.setItem('username', user); // Almacenar en localStorage\n  }\n\n  emitInfo(userInfo: any) {\n    localStorage.setItem('userInfo', userInfo); // Almacenar en localStorage\n  }\n\n  getUserData(user: any) {\n    this.usernameSubject.next(user);\n    localStorage.setItem('username', user); // Almacenar en localStorage\n  }\n\n\n  clearTokens() {\n    this.cookieService.delete(this.accessTokenKey, '/');\n    this.cookieService.delete(this.refreshTokenKey, '/');\n  }\n\n  logout() {\n    const accessToken = this.cookieService.get(this.refreshTokenKey);\n    localStorage.removeItem('username');\n    if (accessToken) {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${accessToken}`\n      });\n      this.clearTokens();\n  \n      this.http.get(this.urlLogout, { headers }).subscribe(\n        () => {\n          // Logout exitoso, redirigir a la p치gina deseada\n          this.router.navigate(['/ruta-deseada']);\n        },\n        (error) => {\n          // Manejar errores si es necesario\n        }\n      );\n    } else {\n      // Manejar caso sin token de acceso\n      return throwError(() => new Error('No se encontr칩 el token de acceso'));\n    }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}